// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package smartcatclient

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson7b166cadDecodeGithubComMarkus621GoSmartcatClient(in *jlexer.Lexer, out *WorkflowStage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "progress":
			out.Progress = uint(in.Uint())
		case "stageType":
			out.StageType = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7b166cadEncodeGithubComMarkus621GoSmartcatClient(out *jwriter.Writer, in WorkflowStage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"progress\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.Progress))
	}
	{
		const prefix string = ",\"stageType\":"
		out.RawString(prefix)
		out.String(string(in.StageType))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WorkflowStage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7b166cadEncodeGithubComMarkus621GoSmartcatClient(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WorkflowStage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7b166cadEncodeGithubComMarkus621GoSmartcatClient(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WorkflowStage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7b166cadDecodeGithubComMarkus621GoSmartcatClient(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WorkflowStage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7b166cadDecodeGithubComMarkus621GoSmartcatClient(l, v)
}
func easyjson7b166cadDecodeGithubComMarkus621GoSmartcatClient1(in *jlexer.Lexer, out *Vendor) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "vendorAccountId":
			out.VendorAccountID = string(in.String())
		case "removedFromProject":
			out.RemovedFromProject = bool(in.Bool())
		case "cost":
			(out.Cost).UnmarshalEasyJSON(in)
		case "costDetailsFileId":
			out.CostDetailsFileID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7b166cadEncodeGithubComMarkus621GoSmartcatClient1(out *jwriter.Writer, in Vendor) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"vendorAccountId\":"
		out.RawString(prefix[1:])
		out.String(string(in.VendorAccountID))
	}
	{
		const prefix string = ",\"removedFromProject\":"
		out.RawString(prefix)
		out.Bool(bool(in.RemovedFromProject))
	}
	{
		const prefix string = ",\"cost\":"
		out.RawString(prefix)
		(in.Cost).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"costDetailsFileId\":"
		out.RawString(prefix)
		out.String(string(in.CostDetailsFileID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Vendor) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7b166cadEncodeGithubComMarkus621GoSmartcatClient1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Vendor) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7b166cadEncodeGithubComMarkus621GoSmartcatClient1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Vendor) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7b166cadDecodeGithubComMarkus621GoSmartcatClient1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Vendor) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7b166cadDecodeGithubComMarkus621GoSmartcatClient1(l, v)
}
func easyjson7b166cadDecodeGithubComMarkus621GoSmartcatClient2(in *jlexer.Lexer, out *TranslationMemories) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(TranslationMemories, 0, 2)
			} else {
				*out = TranslationMemories{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 struct {
				ID             string `json:"id"`
				MatchThreshold int    `json:"matchThreshold"`
				IsWritable     bool   `json:"isWritable"`
			}
			easyjson7b166cadDecode(in, &v1)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7b166cadEncodeGithubComMarkus621GoSmartcatClient2(out *jwriter.Writer, in TranslationMemories) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			easyjson7b166cadEncode(out, v3)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v TranslationMemories) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7b166cadEncodeGithubComMarkus621GoSmartcatClient2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TranslationMemories) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7b166cadEncodeGithubComMarkus621GoSmartcatClient2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TranslationMemories) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7b166cadDecodeGithubComMarkus621GoSmartcatClient2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TranslationMemories) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7b166cadDecodeGithubComMarkus621GoSmartcatClient2(l, v)
}
func easyjson7b166cadDecode(in *jlexer.Lexer, out *struct {
	ID             string `json:"id"`
	MatchThreshold int    `json:"matchThreshold"`
	IsWritable     bool   `json:"isWritable"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "matchThreshold":
			out.MatchThreshold = int(in.Int())
		case "isWritable":
			out.IsWritable = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7b166cadEncode(out *jwriter.Writer, in struct {
	ID             string `json:"id"`
	MatchThreshold int    `json:"matchThreshold"`
	IsWritable     bool   `json:"isWritable"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"matchThreshold\":"
		out.RawString(prefix)
		out.Int(int(in.MatchThreshold))
	}
	{
		const prefix string = ",\"isWritable\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsWritable))
	}
	out.RawByte('}')
}
func easyjson7b166cadDecodeGithubComMarkus621GoSmartcatClient3(in *jlexer.Lexer, out *StatisticsList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(StatisticsList, 0, 1)
			} else {
				*out = StatisticsList{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v4 Statistics
			(v4).UnmarshalEasyJSON(in)
			*out = append(*out, v4)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7b166cadEncodeGithubComMarkus621GoSmartcatClient3(out *jwriter.Writer, in StatisticsList) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v5, v6 := range in {
			if v5 > 0 {
				out.RawByte(',')
			}
			(v6).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v StatisticsList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7b166cadEncodeGithubComMarkus621GoSmartcatClient3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StatisticsList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7b166cadEncodeGithubComMarkus621GoSmartcatClient3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StatisticsList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7b166cadDecodeGithubComMarkus621GoSmartcatClient3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StatisticsList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7b166cadDecodeGithubComMarkus621GoSmartcatClient3(l, v)
}
func easyjson7b166cadDecodeGithubComMarkus621GoSmartcatClient4(in *jlexer.Lexer, out *StatisticsItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "words":
			out.Words = uint64(in.Uint64())
		case "percent":
			out.Percent = uint(in.Uint())
		case "segments":
			out.Segments = uint16(in.Uint16())
		case "pages":
			out.Pages = float64(in.Float64())
		case "charsWithoutSpaces":
			out.CharsWithoutSpaces = uint64(in.Uint64())
		case "charsWithSpaces":
			out.CharsWithSpaces = uint64(in.Uint64())
		case "effectiveWordsForBilling":
			out.EffectiveWordsForBilling = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7b166cadEncodeGithubComMarkus621GoSmartcatClient4(out *jwriter.Writer, in StatisticsItem) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"words\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Words))
	}
	{
		const prefix string = ",\"percent\":"
		out.RawString(prefix)
		out.Uint(uint(in.Percent))
	}
	{
		const prefix string = ",\"segments\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Segments))
	}
	{
		const prefix string = ",\"pages\":"
		out.RawString(prefix)
		out.Float64(float64(in.Pages))
	}
	{
		const prefix string = ",\"charsWithoutSpaces\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.CharsWithoutSpaces))
	}
	{
		const prefix string = ",\"charsWithSpaces\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.CharsWithSpaces))
	}
	{
		const prefix string = ",\"effectiveWordsForBilling\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.EffectiveWordsForBilling))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StatisticsItem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7b166cadEncodeGithubComMarkus621GoSmartcatClient4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StatisticsItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7b166cadEncodeGithubComMarkus621GoSmartcatClient4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StatisticsItem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7b166cadDecodeGithubComMarkus621GoSmartcatClient4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StatisticsItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7b166cadDecodeGithubComMarkus621GoSmartcatClient4(l, v)
}
func easyjson7b166cadDecodeGithubComMarkus621GoSmartcatClient5(in *jlexer.Lexer, out *StatisticsDocumentsItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "statistics":
			if in.IsNull() {
				in.Skip()
				out.Statistics = nil
			} else {
				in.Delim('[')
				if out.Statistics == nil {
					if !in.IsDelim(']') {
						out.Statistics = make([]StatisticsItem, 0, 0)
					} else {
						out.Statistics = []StatisticsItem{}
					}
				} else {
					out.Statistics = (out.Statistics)[:0]
				}
				for !in.IsDelim(']') {
					var v7 StatisticsItem
					(v7).UnmarshalEasyJSON(in)
					out.Statistics = append(out.Statistics, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7b166cadEncodeGithubComMarkus621GoSmartcatClient5(out *jwriter.Writer, in StatisticsDocumentsItem) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"statistics\":"
		out.RawString(prefix)
		if in.Statistics == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Statistics {
				if v8 > 0 {
					out.RawByte(',')
				}
				(v9).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StatisticsDocumentsItem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7b166cadEncodeGithubComMarkus621GoSmartcatClient5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StatisticsDocumentsItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7b166cadEncodeGithubComMarkus621GoSmartcatClient5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StatisticsDocumentsItem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7b166cadDecodeGithubComMarkus621GoSmartcatClient5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StatisticsDocumentsItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7b166cadDecodeGithubComMarkus621GoSmartcatClient5(l, v)
}
func easyjson7b166cadDecodeGithubComMarkus621GoSmartcatClient6(in *jlexer.Lexer, out *Statistics) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "language":
			out.Language = string(in.String())
		case "statistics":
			if in.IsNull() {
				in.Skip()
				out.Statistics = nil
			} else {
				in.Delim('[')
				if out.Statistics == nil {
					if !in.IsDelim(']') {
						out.Statistics = make([]StatisticsItem, 0, 0)
					} else {
						out.Statistics = []StatisticsItem{}
					}
				} else {
					out.Statistics = (out.Statistics)[:0]
				}
				for !in.IsDelim(']') {
					var v10 StatisticsItem
					(v10).UnmarshalEasyJSON(in)
					out.Statistics = append(out.Statistics, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "documents":
			if in.IsNull() {
				in.Skip()
				out.Documents = nil
			} else {
				in.Delim('[')
				if out.Documents == nil {
					if !in.IsDelim(']') {
						out.Documents = make([]StatisticsDocumentsItem, 0, 1)
					} else {
						out.Documents = []StatisticsDocumentsItem{}
					}
				} else {
					out.Documents = (out.Documents)[:0]
				}
				for !in.IsDelim(']') {
					var v11 StatisticsDocumentsItem
					(v11).UnmarshalEasyJSON(in)
					out.Documents = append(out.Documents, v11)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7b166cadEncodeGithubComMarkus621GoSmartcatClient6(out *jwriter.Writer, in Statistics) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"language\":"
		out.RawString(prefix[1:])
		out.String(string(in.Language))
	}
	{
		const prefix string = ",\"statistics\":"
		out.RawString(prefix)
		if in.Statistics == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v12, v13 := range in.Statistics {
				if v12 > 0 {
					out.RawByte(',')
				}
				(v13).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"documents\":"
		out.RawString(prefix)
		if in.Documents == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.Documents {
				if v14 > 0 {
					out.RawByte(',')
				}
				(v15).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Statistics) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7b166cadEncodeGithubComMarkus621GoSmartcatClient6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Statistics) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7b166cadEncodeGithubComMarkus621GoSmartcatClient6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Statistics) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7b166cadDecodeGithubComMarkus621GoSmartcatClient6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Statistics) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7b166cadDecodeGithubComMarkus621GoSmartcatClient6(l, v)
}
func easyjson7b166cadDecodeGithubComMarkus621GoSmartcatClient7(in *jlexer.Lexer, out *ProjectsList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(ProjectsList, 0, 0)
			} else {
				*out = ProjectsList{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v16 Project
			(v16).UnmarshalEasyJSON(in)
			*out = append(*out, v16)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7b166cadEncodeGithubComMarkus621GoSmartcatClient7(out *jwriter.Writer, in ProjectsList) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v17, v18 := range in {
			if v17 > 0 {
				out.RawByte(',')
			}
			(v18).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v ProjectsList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7b166cadEncodeGithubComMarkus621GoSmartcatClient7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ProjectsList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7b166cadEncodeGithubComMarkus621GoSmartcatClient7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ProjectsList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7b166cadDecodeGithubComMarkus621GoSmartcatClient7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ProjectsList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7b166cadDecodeGithubComMarkus621GoSmartcatClient7(l, v)
}
func easyjson7b166cadDecodeGithubComMarkus621GoSmartcatClient8(in *jlexer.Lexer, out *Project) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "accountId":
			out.AccountID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "deadline":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Deadline).UnmarshalJSON(data))
			}
		case "creationDate":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreationDate).UnmarshalJSON(data))
			}
		case "createdByUserId":
			out.CreatedByUserID = string(in.String())
		case "createdByUserEmail":
			out.CreatedByUserEmail = string(in.String())
		case "modificationDate":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ModificationDate).UnmarshalJSON(data))
			}
		case "sourceLanguageId":
			out.SourceLanguageID = uint64(in.Uint64())
		case "sourceLanguage":
			out.SourceLanguage = string(in.String())
		case "targetLanguages":
			if in.IsNull() {
				in.Skip()
				out.TargetLanguages = nil
			} else {
				in.Delim('[')
				if out.TargetLanguages == nil {
					if !in.IsDelim(']') {
						out.TargetLanguages = make([]string, 0, 4)
					} else {
						out.TargetLanguages = []string{}
					}
				} else {
					out.TargetLanguages = (out.TargetLanguages)[:0]
				}
				for !in.IsDelim(']') {
					var v19 string
					v19 = string(in.String())
					out.TargetLanguages = append(out.TargetLanguages, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "status":
			out.Status = string(in.String())
		case "statusModificationDate":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.StatusModificationDate).UnmarshalJSON(data))
			}
		case "domainId":
			out.DomainID = uint64(in.Uint64())
		case "clientId":
			out.ClientID = uint64(in.Uint64())
		case "vendors":
			if in.IsNull() {
				in.Skip()
				out.Vendors = nil
			} else {
				in.Delim('[')
				if out.Vendors == nil {
					if !in.IsDelim(']') {
						out.Vendors = make([]Vendor, 0, 0)
					} else {
						out.Vendors = []Vendor{}
					}
				} else {
					out.Vendors = (out.Vendors)[:0]
				}
				for !in.IsDelim(']') {
					var v20 Vendor
					(v20).UnmarshalEasyJSON(in)
					out.Vendors = append(out.Vendors, v20)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "workflowStages":
			if in.IsNull() {
				in.Skip()
				out.WorkflowStages = nil
			} else {
				in.Delim('[')
				if out.WorkflowStages == nil {
					if !in.IsDelim(']') {
						out.WorkflowStages = make([]WorkflowStage, 0, 2)
					} else {
						out.WorkflowStages = []WorkflowStage{}
					}
				} else {
					out.WorkflowStages = (out.WorkflowStages)[:0]
				}
				for !in.IsDelim(']') {
					var v21 WorkflowStage
					(v21).UnmarshalEasyJSON(in)
					out.WorkflowStages = append(out.WorkflowStages, v21)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "documents":
			if in.IsNull() {
				in.Skip()
				out.Documents = nil
			} else {
				in.Delim('[')
				if out.Documents == nil {
					if !in.IsDelim(']') {
						out.Documents = make([]Document, 0, 0)
					} else {
						out.Documents = []Document{}
					}
				} else {
					out.Documents = (out.Documents)[:0]
				}
				for !in.IsDelim(']') {
					var v22 Document
					(v22).UnmarshalEasyJSON(in)
					out.Documents = append(out.Documents, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "externalTag":
			out.ExternalTag = string(in.String())
		case "specializations":
			if in.IsNull() {
				in.Skip()
				out.Specializations = nil
			} else {
				in.Delim('[')
				if out.Specializations == nil {
					if !in.IsDelim(']') {
						out.Specializations = make([]string, 0, 4)
					} else {
						out.Specializations = []string{}
					}
				} else {
					out.Specializations = (out.Specializations)[:0]
				}
				for !in.IsDelim(']') {
					var v23 string
					v23 = string(in.String())
					out.Specializations = append(out.Specializations, v23)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "managers":
			if in.IsNull() {
				in.Skip()
				out.Managers = nil
			} else {
				in.Delim('[')
				if out.Managers == nil {
					if !in.IsDelim(']') {
						out.Managers = make([]string, 0, 4)
					} else {
						out.Managers = []string{}
					}
				} else {
					out.Managers = (out.Managers)[:0]
				}
				for !in.IsDelim(']') {
					var v24 string
					v24 = string(in.String())
					out.Managers = append(out.Managers, v24)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "number":
			if in.IsNull() {
				in.Skip()
				out.Number = nil
			} else {
				in.Delim('[')
				if out.Number == nil {
					if !in.IsDelim(']') {
						out.Number = make([]string, 0, 4)
					} else {
						out.Number = []string{}
					}
				} else {
					out.Number = (out.Number)[:0]
				}
				for !in.IsDelim(']') {
					var v25 string
					v25 = string(in.String())
					out.Number = append(out.Number, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7b166cadEncodeGithubComMarkus621GoSmartcatClient8(out *jwriter.Writer, in Project) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"accountId\":"
		out.RawString(prefix)
		out.String(string(in.AccountID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"deadline\":"
		out.RawString(prefix)
		out.Raw((in.Deadline).MarshalJSON())
	}
	{
		const prefix string = ",\"creationDate\":"
		out.RawString(prefix)
		out.Raw((in.CreationDate).MarshalJSON())
	}
	{
		const prefix string = ",\"createdByUserId\":"
		out.RawString(prefix)
		out.String(string(in.CreatedByUserID))
	}
	{
		const prefix string = ",\"createdByUserEmail\":"
		out.RawString(prefix)
		out.String(string(in.CreatedByUserEmail))
	}
	{
		const prefix string = ",\"modificationDate\":"
		out.RawString(prefix)
		out.Raw((in.ModificationDate).MarshalJSON())
	}
	{
		const prefix string = ",\"sourceLanguageId\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.SourceLanguageID))
	}
	{
		const prefix string = ",\"sourceLanguage\":"
		out.RawString(prefix)
		out.String(string(in.SourceLanguage))
	}
	{
		const prefix string = ",\"targetLanguages\":"
		out.RawString(prefix)
		if in.TargetLanguages == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v26, v27 := range in.TargetLanguages {
				if v26 > 0 {
					out.RawByte(',')
				}
				out.String(string(v27))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"statusModificationDate\":"
		out.RawString(prefix)
		out.Raw((in.StatusModificationDate).MarshalJSON())
	}
	{
		const prefix string = ",\"domainId\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.DomainID))
	}
	{
		const prefix string = ",\"clientId\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.ClientID))
	}
	{
		const prefix string = ",\"vendors\":"
		out.RawString(prefix)
		if in.Vendors == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v28, v29 := range in.Vendors {
				if v28 > 0 {
					out.RawByte(',')
				}
				(v29).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"workflowStages\":"
		out.RawString(prefix)
		if in.WorkflowStages == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v30, v31 := range in.WorkflowStages {
				if v30 > 0 {
					out.RawByte(',')
				}
				(v31).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"documents\":"
		out.RawString(prefix)
		if in.Documents == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v32, v33 := range in.Documents {
				if v32 > 0 {
					out.RawByte(',')
				}
				(v33).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"externalTag\":"
		out.RawString(prefix)
		out.String(string(in.ExternalTag))
	}
	{
		const prefix string = ",\"specializations\":"
		out.RawString(prefix)
		if in.Specializations == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v34, v35 := range in.Specializations {
				if v34 > 0 {
					out.RawByte(',')
				}
				out.String(string(v35))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"managers\":"
		out.RawString(prefix)
		if in.Managers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v36, v37 := range in.Managers {
				if v36 > 0 {
					out.RawByte(',')
				}
				out.String(string(v37))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"number\":"
		out.RawString(prefix)
		if in.Number == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v38, v39 := range in.Number {
				if v38 > 0 {
					out.RawByte(',')
				}
				out.String(string(v39))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Project) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7b166cadEncodeGithubComMarkus621GoSmartcatClient8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Project) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7b166cadEncodeGithubComMarkus621GoSmartcatClient8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Project) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7b166cadDecodeGithubComMarkus621GoSmartcatClient8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Project) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7b166cadDecodeGithubComMarkus621GoSmartcatClient8(l, v)
}
func easyjson7b166cadDecodeGithubComMarkus621GoSmartcatClient9(in *jlexer.Lexer, out *PatchProject) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "deadline":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Deadline).UnmarshalJSON(data))
			}
		case "clientId":
			out.ClientID = string(in.String())
		case "domainId":
			out.DomainID = uint64(in.Uint64())
		case "vendorAccountIds":
			if in.IsNull() {
				in.Skip()
				out.VendorAccountIDs = nil
			} else {
				in.Delim('[')
				if out.VendorAccountIDs == nil {
					if !in.IsDelim(']') {
						out.VendorAccountIDs = make([]string, 0, 4)
					} else {
						out.VendorAccountIDs = []string{}
					}
				} else {
					out.VendorAccountIDs = (out.VendorAccountIDs)[:0]
				}
				for !in.IsDelim(']') {
					var v40 string
					v40 = string(in.String())
					out.VendorAccountIDs = append(out.VendorAccountIDs, v40)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "externalTag":
			out.ExternalTag = string(in.String())
		case "specializations":
			if in.IsNull() {
				in.Skip()
				out.Specializations = nil
			} else {
				in.Delim('[')
				if out.Specializations == nil {
					if !in.IsDelim(']') {
						out.Specializations = make([]string, 0, 4)
					} else {
						out.Specializations = []string{}
					}
				} else {
					out.Specializations = (out.Specializations)[:0]
				}
				for !in.IsDelim(']') {
					var v41 string
					v41 = string(in.String())
					out.Specializations = append(out.Specializations, v41)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "workflowStages":
			if in.IsNull() {
				in.Skip()
				out.WorkflowStages = nil
			} else {
				in.Delim('[')
				if out.WorkflowStages == nil {
					if !in.IsDelim(']') {
						out.WorkflowStages = make([]string, 0, 4)
					} else {
						out.WorkflowStages = []string{}
					}
				} else {
					out.WorkflowStages = (out.WorkflowStages)[:0]
				}
				for !in.IsDelim(']') {
					var v42 string
					v42 = string(in.String())
					out.WorkflowStages = append(out.WorkflowStages, v42)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7b166cadEncodeGithubComMarkus621GoSmartcatClient9(out *jwriter.Writer, in PatchProject) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"deadline\":"
		out.RawString(prefix)
		out.Raw((in.Deadline).MarshalJSON())
	}
	{
		const prefix string = ",\"clientId\":"
		out.RawString(prefix)
		out.String(string(in.ClientID))
	}
	{
		const prefix string = ",\"domainId\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.DomainID))
	}
	{
		const prefix string = ",\"vendorAccountIds\":"
		out.RawString(prefix)
		if in.VendorAccountIDs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v43, v44 := range in.VendorAccountIDs {
				if v43 > 0 {
					out.RawByte(',')
				}
				out.String(string(v44))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"externalTag\":"
		out.RawString(prefix)
		out.String(string(in.ExternalTag))
	}
	{
		const prefix string = ",\"specializations\":"
		out.RawString(prefix)
		if in.Specializations == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v45, v46 := range in.Specializations {
				if v45 > 0 {
					out.RawByte(',')
				}
				out.String(string(v46))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"workflowStages\":"
		out.RawString(prefix)
		if in.WorkflowStages == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v47, v48 := range in.WorkflowStages {
				if v47 > 0 {
					out.RawByte(',')
				}
				out.String(string(v48))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PatchProject) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7b166cadEncodeGithubComMarkus621GoSmartcatClient9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PatchProject) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7b166cadEncodeGithubComMarkus621GoSmartcatClient9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PatchProject) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7b166cadDecodeGithubComMarkus621GoSmartcatClient9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PatchProject) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7b166cadDecodeGithubComMarkus621GoSmartcatClient9(l, v)
}
func easyjson7b166cadDecodeGithubComMarkus621GoSmartcatClient10(in *jlexer.Lexer, out *Executive) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "assignedWordsCount":
			out.AssignedWordsCount = uint64(in.Uint64())
		case "progress":
			out.Progress = uint(in.Uint())
		case "supplierType":
			out.SupplierType = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7b166cadEncodeGithubComMarkus621GoSmartcatClient10(out *jwriter.Writer, in Executive) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"assignedWordsCount\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.AssignedWordsCount))
	}
	{
		const prefix string = ",\"progress\":"
		out.RawString(prefix)
		out.Uint(uint(in.Progress))
	}
	{
		const prefix string = ",\"supplierType\":"
		out.RawString(prefix)
		out.String(string(in.SupplierType))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Executive) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7b166cadEncodeGithubComMarkus621GoSmartcatClient10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Executive) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7b166cadEncodeGithubComMarkus621GoSmartcatClient10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Executive) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7b166cadDecodeGithubComMarkus621GoSmartcatClient10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Executive) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7b166cadDecodeGithubComMarkus621GoSmartcatClient10(l, v)
}
func easyjson7b166cadDecodeGithubComMarkus621GoSmartcatClient11(in *jlexer.Lexer, out *DocumentWorkflowStage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "progress":
			out.Progress = uint(in.Uint())
		case "wordsTranslated":
			out.WordsTranslated = uint64(in.Uint64())
		case "unassignedWordsCount":
			out.UnassignedWordsCount = uint64(in.Uint64())
		case "status":
			out.Status = string(in.String())
		case "executives":
			if in.IsNull() {
				in.Skip()
				out.Executives = nil
			} else {
				in.Delim('[')
				if out.Executives == nil {
					if !in.IsDelim(']') {
						out.Executives = make([]Executive, 0, 1)
					} else {
						out.Executives = []Executive{}
					}
				} else {
					out.Executives = (out.Executives)[:0]
				}
				for !in.IsDelim(']') {
					var v49 Executive
					(v49).UnmarshalEasyJSON(in)
					out.Executives = append(out.Executives, v49)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7b166cadEncodeGithubComMarkus621GoSmartcatClient11(out *jwriter.Writer, in DocumentWorkflowStage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"progress\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.Progress))
	}
	{
		const prefix string = ",\"wordsTranslated\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.WordsTranslated))
	}
	{
		const prefix string = ",\"unassignedWordsCount\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.UnassignedWordsCount))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"executives\":"
		out.RawString(prefix)
		if in.Executives == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v50, v51 := range in.Executives {
				if v50 > 0 {
					out.RawByte(',')
				}
				(v51).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DocumentWorkflowStage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7b166cadEncodeGithubComMarkus621GoSmartcatClient11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DocumentWorkflowStage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7b166cadEncodeGithubComMarkus621GoSmartcatClient11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DocumentWorkflowStage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7b166cadDecodeGithubComMarkus621GoSmartcatClient11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DocumentWorkflowStage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7b166cadDecodeGithubComMarkus621GoSmartcatClient11(l, v)
}
func easyjson7b166cadDecodeGithubComMarkus621GoSmartcatClient12(in *jlexer.Lexer, out *Document) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "creationDate":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreationDate).UnmarshalJSON(data))
			}
		case "deadline":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Deadline).UnmarshalJSON(data))
			}
		case "sourceLanguage":
			out.SourceLanguage = string(in.String())
		case "documentDisassemblingStatus":
			out.DisassemblingStatus = string(in.String())
		case "targetLanguage":
			out.TargetLanguage = string(in.String())
		case "status":
			out.Status = string(in.String())
		case "wordsCount":
			out.WordsCount = uint64(in.Uint64())
		case "statusModificationDate":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.StatusModificationDate).UnmarshalJSON(data))
			}
		case "pretranslateCompleted":
			out.PretranslateCompleted = bool(in.Bool())
		case "workflowStages":
			if in.IsNull() {
				in.Skip()
				out.WorkflowStages = nil
			} else {
				in.Delim('[')
				if out.WorkflowStages == nil {
					if !in.IsDelim(']') {
						out.WorkflowStages = make([]DocumentWorkflowStage, 0, 1)
					} else {
						out.WorkflowStages = []DocumentWorkflowStage{}
					}
				} else {
					out.WorkflowStages = (out.WorkflowStages)[:0]
				}
				for !in.IsDelim(']') {
					var v52 DocumentWorkflowStage
					(v52).UnmarshalEasyJSON(in)
					out.WorkflowStages = append(out.WorkflowStages, v52)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "externalId":
			out.ExternalID = string(in.String())
		case "metaInfo":
			out.MetaInfo = string(in.String())
		case "placeholdersAreEnabled":
			out.PlaceholdersAreEnabled = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7b166cadEncodeGithubComMarkus621GoSmartcatClient12(out *jwriter.Writer, in Document) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"creationDate\":"
		out.RawString(prefix)
		out.Raw((in.CreationDate).MarshalJSON())
	}
	{
		const prefix string = ",\"deadline\":"
		out.RawString(prefix)
		out.Raw((in.Deadline).MarshalJSON())
	}
	{
		const prefix string = ",\"sourceLanguage\":"
		out.RawString(prefix)
		out.String(string(in.SourceLanguage))
	}
	{
		const prefix string = ",\"documentDisassemblingStatus\":"
		out.RawString(prefix)
		out.String(string(in.DisassemblingStatus))
	}
	{
		const prefix string = ",\"targetLanguage\":"
		out.RawString(prefix)
		out.String(string(in.TargetLanguage))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"wordsCount\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.WordsCount))
	}
	{
		const prefix string = ",\"statusModificationDate\":"
		out.RawString(prefix)
		out.Raw((in.StatusModificationDate).MarshalJSON())
	}
	{
		const prefix string = ",\"pretranslateCompleted\":"
		out.RawString(prefix)
		out.Bool(bool(in.PretranslateCompleted))
	}
	{
		const prefix string = ",\"workflowStages\":"
		out.RawString(prefix)
		if in.WorkflowStages == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v53, v54 := range in.WorkflowStages {
				if v53 > 0 {
					out.RawByte(',')
				}
				(v54).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"externalId\":"
		out.RawString(prefix)
		out.String(string(in.ExternalID))
	}
	{
		const prefix string = ",\"metaInfo\":"
		out.RawString(prefix)
		out.String(string(in.MetaInfo))
	}
	{
		const prefix string = ",\"placeholdersAreEnabled\":"
		out.RawString(prefix)
		out.Bool(bool(in.PlaceholdersAreEnabled))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Document) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7b166cadEncodeGithubComMarkus621GoSmartcatClient12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Document) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7b166cadEncodeGithubComMarkus621GoSmartcatClient12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Document) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7b166cadDecodeGithubComMarkus621GoSmartcatClient12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Document) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7b166cadDecodeGithubComMarkus621GoSmartcatClient12(l, v)
}
func easyjson7b166cadDecodeGithubComMarkus621GoSmartcatClient13(in *jlexer.Lexer, out *Cost) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "value":
			out.Value = float64(in.Float64())
		case "currency":
			out.Currency = string(in.String())
		case "accuracyDegree":
			out.AccuracyDegree = string(in.String())
		case "detailsFileName":
			out.DetailsFileName = string(in.String())
		case "paymentStatus":
			out.PaymentStatus = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7b166cadEncodeGithubComMarkus621GoSmartcatClient13(out *jwriter.Writer, in Cost) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix[1:])
		out.Float64(float64(in.Value))
	}
	{
		const prefix string = ",\"currency\":"
		out.RawString(prefix)
		out.String(string(in.Currency))
	}
	{
		const prefix string = ",\"accuracyDegree\":"
		out.RawString(prefix)
		out.String(string(in.AccuracyDegree))
	}
	{
		const prefix string = ",\"detailsFileName\":"
		out.RawString(prefix)
		out.String(string(in.DetailsFileName))
	}
	{
		const prefix string = ",\"paymentStatus\":"
		out.RawString(prefix)
		out.String(string(in.PaymentStatus))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Cost) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7b166cadEncodeGithubComMarkus621GoSmartcatClient13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Cost) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7b166cadEncodeGithubComMarkus621GoSmartcatClient13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Cost) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7b166cadDecodeGithubComMarkus621GoSmartcatClient13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Cost) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7b166cadDecodeGithubComMarkus621GoSmartcatClient13(l, v)
}
func easyjson7b166cadDecodeGithubComMarkus621GoSmartcatClient14(in *jlexer.Lexer, out *CompletedWorkStatisticsList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(CompletedWorkStatisticsList, 0, 0)
			} else {
				*out = CompletedWorkStatisticsList{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v55 CompletedWorkStatistics
			(v55).UnmarshalEasyJSON(in)
			*out = append(*out, v55)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7b166cadEncodeGithubComMarkus621GoSmartcatClient14(out *jwriter.Writer, in CompletedWorkStatisticsList) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v56, v57 := range in {
			if v56 > 0 {
				out.RawByte(',')
			}
			(v57).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v CompletedWorkStatisticsList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7b166cadEncodeGithubComMarkus621GoSmartcatClient14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CompletedWorkStatisticsList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7b166cadEncodeGithubComMarkus621GoSmartcatClient14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CompletedWorkStatisticsList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7b166cadDecodeGithubComMarkus621GoSmartcatClient14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CompletedWorkStatisticsList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7b166cadDecodeGithubComMarkus621GoSmartcatClient14(l, v)
}
func easyjson7b166cadDecodeGithubComMarkus621GoSmartcatClient15(in *jlexer.Lexer, out *CompletedWorkStatistics) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "executive":
			easyjson7b166cadDecode1(in, &out.Executive)
		case "stageType":
			out.StageType = string(in.String())
		case "stageNumber":
			out.StageNumber = int(in.Int())
		case "targetLanguage":
			out.TargetLanguage = string(in.String())
		case "total":
			if in.IsNull() {
				in.Skip()
				out.Total = nil
			} else {
				in.Delim('[')
				if out.Total == nil {
					if !in.IsDelim(']') {
						out.Total = make([]StatisticsItem, 0, 0)
					} else {
						out.Total = []StatisticsItem{}
					}
				} else {
					out.Total = (out.Total)[:0]
				}
				for !in.IsDelim(']') {
					var v58 StatisticsItem
					(v58).UnmarshalEasyJSON(in)
					out.Total = append(out.Total, v58)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "documents":
			if in.IsNull() {
				in.Skip()
				out.Documents = nil
			} else {
				in.Delim('[')
				if out.Documents == nil {
					if !in.IsDelim(']') {
						out.Documents = make([]StatisticsDocumentsItem, 0, 1)
					} else {
						out.Documents = []StatisticsDocumentsItem{}
					}
				} else {
					out.Documents = (out.Documents)[:0]
				}
				for !in.IsDelim(']') {
					var v59 StatisticsDocumentsItem
					(v59).UnmarshalEasyJSON(in)
					out.Documents = append(out.Documents, v59)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7b166cadEncodeGithubComMarkus621GoSmartcatClient15(out *jwriter.Writer, in CompletedWorkStatistics) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"executive\":"
		out.RawString(prefix[1:])
		easyjson7b166cadEncode1(out, in.Executive)
	}
	{
		const prefix string = ",\"stageType\":"
		out.RawString(prefix)
		out.String(string(in.StageType))
	}
	{
		const prefix string = ",\"stageNumber\":"
		out.RawString(prefix)
		out.Int(int(in.StageNumber))
	}
	{
		const prefix string = ",\"targetLanguage\":"
		out.RawString(prefix)
		out.String(string(in.TargetLanguage))
	}
	{
		const prefix string = ",\"total\":"
		out.RawString(prefix)
		if in.Total == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v60, v61 := range in.Total {
				if v60 > 0 {
					out.RawByte(',')
				}
				(v61).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"documents\":"
		out.RawString(prefix)
		if in.Documents == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v62, v63 := range in.Documents {
				if v62 > 0 {
					out.RawByte(',')
				}
				(v63).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CompletedWorkStatistics) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7b166cadEncodeGithubComMarkus621GoSmartcatClient15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CompletedWorkStatistics) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7b166cadEncodeGithubComMarkus621GoSmartcatClient15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CompletedWorkStatistics) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7b166cadDecodeGithubComMarkus621GoSmartcatClient15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CompletedWorkStatistics) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7b166cadDecodeGithubComMarkus621GoSmartcatClient15(l, v)
}
func easyjson7b166cadDecode1(in *jlexer.Lexer, out *struct {
	ID           string `json:"id"`
	SupplierType string `json:"supplierType"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "supplierType":
			out.SupplierType = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7b166cadEncode1(out *jwriter.Writer, in struct {
	ID           string `json:"id"`
	SupplierType string `json:"supplierType"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"supplierType\":"
		out.RawString(prefix)
		out.String(string(in.SupplierType))
	}
	out.RawByte('}')
}
