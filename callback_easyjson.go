// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package smartcatclient

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonEcffa49DecodeGithubComMarkus621GoSmartcatClient(in *jlexer.Lexer, out *LastErrors) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(LastErrors, 0, 0)
			} else {
				*out = LastErrors{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 LastError
			(v1).UnmarshalEasyJSON(in)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEcffa49EncodeGithubComMarkus621GoSmartcatClient(out *jwriter.Writer, in LastErrors) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v LastErrors) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEcffa49EncodeGithubComMarkus621GoSmartcatClient(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LastErrors) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEcffa49EncodeGithubComMarkus621GoSmartcatClient(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LastErrors) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEcffa49DecodeGithubComMarkus621GoSmartcatClient(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LastErrors) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEcffa49DecodeGithubComMarkus621GoSmartcatClient(l, v)
}
func easyjsonEcffa49DecodeGithubComMarkus621GoSmartcatClient1(in *jlexer.Lexer, out *LastError) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "created":
			out.Created = string(in.String())
		case "url":
			out.URL = string(in.String())
		case "reason":
			out.Reason = string(in.String())
		case "code":
			out.Code = int(in.Int())
		case "content":
			out.Content = string(in.String())
		case "sourceIds":
			if in.IsNull() {
				in.Skip()
				out.SourceIds = nil
			} else {
				in.Delim('[')
				if out.SourceIds == nil {
					if !in.IsDelim(']') {
						out.SourceIds = make([]string, 0, 4)
					} else {
						out.SourceIds = []string{}
					}
				} else {
					out.SourceIds = (out.SourceIds)[:0]
				}
				for !in.IsDelim(']') {
					var v4 string
					v4 = string(in.String())
					out.SourceIds = append(out.SourceIds, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEcffa49EncodeGithubComMarkus621GoSmartcatClient1(out *jwriter.Writer, in LastError) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"created\":"
		out.RawString(prefix[1:])
		out.String(string(in.Created))
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		out.String(string(in.URL))
	}
	{
		const prefix string = ",\"reason\":"
		out.RawString(prefix)
		out.String(string(in.Reason))
	}
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix)
		out.Int(int(in.Code))
	}
	{
		const prefix string = ",\"content\":"
		out.RawString(prefix)
		out.String(string(in.Content))
	}
	{
		const prefix string = ",\"sourceIds\":"
		out.RawString(prefix)
		if in.SourceIds == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.SourceIds {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.String(string(v6))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LastError) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEcffa49EncodeGithubComMarkus621GoSmartcatClient1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LastError) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEcffa49EncodeGithubComMarkus621GoSmartcatClient1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LastError) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEcffa49DecodeGithubComMarkus621GoSmartcatClient1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LastError) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEcffa49DecodeGithubComMarkus621GoSmartcatClient1(l, v)
}
func easyjsonEcffa49DecodeGithubComMarkus621GoSmartcatClient2(in *jlexer.Lexer, out *Callback) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "url":
			out.URL = string(in.String())
		case "additionalHeaders":
			if in.IsNull() {
				in.Skip()
				out.AdditionalHeaders = nil
			} else {
				in.Delim('[')
				if out.AdditionalHeaders == nil {
					if !in.IsDelim(']') {
						out.AdditionalHeaders = make([]AdditionalHeader, 0, 2)
					} else {
						out.AdditionalHeaders = []AdditionalHeader{}
					}
				} else {
					out.AdditionalHeaders = (out.AdditionalHeaders)[:0]
				}
				for !in.IsDelim(']') {
					var v7 AdditionalHeader
					(v7).UnmarshalEasyJSON(in)
					out.AdditionalHeaders = append(out.AdditionalHeaders, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEcffa49EncodeGithubComMarkus621GoSmartcatClient2(out *jwriter.Writer, in Callback) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix[1:])
		out.String(string(in.URL))
	}
	{
		const prefix string = ",\"additionalHeaders\":"
		out.RawString(prefix)
		if in.AdditionalHeaders == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.AdditionalHeaders {
				if v8 > 0 {
					out.RawByte(',')
				}
				(v9).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Callback) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEcffa49EncodeGithubComMarkus621GoSmartcatClient2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Callback) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEcffa49EncodeGithubComMarkus621GoSmartcatClient2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Callback) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEcffa49DecodeGithubComMarkus621GoSmartcatClient2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Callback) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEcffa49DecodeGithubComMarkus621GoSmartcatClient2(l, v)
}
func easyjsonEcffa49DecodeGithubComMarkus621GoSmartcatClient3(in *jlexer.Lexer, out *AdditionalHeader) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "value":
			out.Value = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEcffa49EncodeGithubComMarkus621GoSmartcatClient3(out *jwriter.Writer, in AdditionalHeader) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix)
		out.String(string(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AdditionalHeader) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEcffa49EncodeGithubComMarkus621GoSmartcatClient3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AdditionalHeader) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEcffa49EncodeGithubComMarkus621GoSmartcatClient3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AdditionalHeader) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEcffa49DecodeGithubComMarkus621GoSmartcatClient3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AdditionalHeader) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEcffa49DecodeGithubComMarkus621GoSmartcatClient3(l, v)
}
