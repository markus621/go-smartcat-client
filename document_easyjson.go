// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package smartcatclient

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson18605acbDecodeGithubComMarkus621GoSmartcatClient(in *jlexer.Lexer, out *ExportTask) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "documentIds":
			if in.IsNull() {
				in.Skip()
				out.DocumentIds = nil
			} else {
				in.Delim('[')
				if out.DocumentIds == nil {
					if !in.IsDelim(']') {
						out.DocumentIds = make([]string, 0, 4)
					} else {
						out.DocumentIds = []string{}
					}
				} else {
					out.DocumentIds = (out.DocumentIds)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.DocumentIds = append(out.DocumentIds, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson18605acbEncodeGithubComMarkus621GoSmartcatClient(out *jwriter.Writer, in ExportTask) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"documentIds\":"
		out.RawString(prefix)
		if in.DocumentIds == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.DocumentIds {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.String(string(v3))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ExportTask) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson18605acbEncodeGithubComMarkus621GoSmartcatClient(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ExportTask) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson18605acbEncodeGithubComMarkus621GoSmartcatClient(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ExportTask) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson18605acbDecodeGithubComMarkus621GoSmartcatClient(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ExportTask) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson18605acbDecodeGithubComMarkus621GoSmartcatClient(l, v)
}
func easyjson18605acbDecodeGithubComMarkus621GoSmartcatClient1(in *jlexer.Lexer, out *DocumentWorkflowStage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "progress":
			out.Progress = float64(in.Float64())
		case "wordsTranslated":
			out.WordsTranslated = uint64(in.Uint64())
		case "unassignedWordsCount":
			out.UnassignedWordsCount = uint64(in.Uint64())
		case "status":
			out.Status = string(in.String())
		case "executives":
			if in.IsNull() {
				in.Skip()
				out.Executives = nil
			} else {
				in.Delim('[')
				if out.Executives == nil {
					if !in.IsDelim(']') {
						out.Executives = make([]Executive, 0, 1)
					} else {
						out.Executives = []Executive{}
					}
				} else {
					out.Executives = (out.Executives)[:0]
				}
				for !in.IsDelim(']') {
					var v4 Executive
					(v4).UnmarshalEasyJSON(in)
					out.Executives = append(out.Executives, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson18605acbEncodeGithubComMarkus621GoSmartcatClient1(out *jwriter.Writer, in DocumentWorkflowStage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"progress\":"
		out.RawString(prefix[1:])
		out.Float64(float64(in.Progress))
	}
	{
		const prefix string = ",\"wordsTranslated\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.WordsTranslated))
	}
	{
		const prefix string = ",\"unassignedWordsCount\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.UnassignedWordsCount))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"executives\":"
		out.RawString(prefix)
		if in.Executives == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Executives {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DocumentWorkflowStage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson18605acbEncodeGithubComMarkus621GoSmartcatClient1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DocumentWorkflowStage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson18605acbEncodeGithubComMarkus621GoSmartcatClient1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DocumentWorkflowStage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson18605acbDecodeGithubComMarkus621GoSmartcatClient1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DocumentWorkflowStage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson18605acbDecodeGithubComMarkus621GoSmartcatClient1(l, v)
}
func easyjson18605acbDecodeGithubComMarkus621GoSmartcatClient2(in *jlexer.Lexer, out *DocumentList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(DocumentList, 0, 0)
			} else {
				*out = DocumentList{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v7 Document
			(v7).UnmarshalEasyJSON(in)
			*out = append(*out, v7)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson18605acbEncodeGithubComMarkus621GoSmartcatClient2(out *jwriter.Writer, in DocumentList) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v8, v9 := range in {
			if v8 > 0 {
				out.RawByte(',')
			}
			(v9).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v DocumentList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson18605acbEncodeGithubComMarkus621GoSmartcatClient2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DocumentList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson18605acbEncodeGithubComMarkus621GoSmartcatClient2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DocumentList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson18605acbDecodeGithubComMarkus621GoSmartcatClient2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DocumentList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson18605acbDecodeGithubComMarkus621GoSmartcatClient2(l, v)
}
func easyjson18605acbDecodeGithubComMarkus621GoSmartcatClient3(in *jlexer.Lexer, out *Document) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "creationDate":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreationDate).UnmarshalJSON(data))
			}
		case "deadline":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Deadline).UnmarshalJSON(data))
			}
		case "sourceLanguage":
			out.SourceLanguage = string(in.String())
		case "documentDisassemblingStatus":
			out.DisassemblingStatus = string(in.String())
		case "targetLanguage":
			out.TargetLanguage = string(in.String())
		case "status":
			out.Status = string(in.String())
		case "wordsCount":
			out.WordsCount = uint64(in.Uint64())
		case "statusModificationDate":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.StatusModificationDate).UnmarshalJSON(data))
			}
		case "pretranslateCompleted":
			out.PretranslateCompleted = bool(in.Bool())
		case "workflowStages":
			if in.IsNull() {
				in.Skip()
				out.WorkflowStages = nil
			} else {
				in.Delim('[')
				if out.WorkflowStages == nil {
					if !in.IsDelim(']') {
						out.WorkflowStages = make([]DocumentWorkflowStage, 0, 1)
					} else {
						out.WorkflowStages = []DocumentWorkflowStage{}
					}
				} else {
					out.WorkflowStages = (out.WorkflowStages)[:0]
				}
				for !in.IsDelim(']') {
					var v10 DocumentWorkflowStage
					(v10).UnmarshalEasyJSON(in)
					out.WorkflowStages = append(out.WorkflowStages, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "externalId":
			out.ExternalID = string(in.String())
		case "metaInfo":
			out.MetaInfo = string(in.String())
		case "placeholdersAreEnabled":
			out.PlaceholdersAreEnabled = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson18605acbEncodeGithubComMarkus621GoSmartcatClient3(out *jwriter.Writer, in Document) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"creationDate\":"
		out.RawString(prefix)
		out.Raw((in.CreationDate).MarshalJSON())
	}
	{
		const prefix string = ",\"deadline\":"
		out.RawString(prefix)
		out.Raw((in.Deadline).MarshalJSON())
	}
	{
		const prefix string = ",\"sourceLanguage\":"
		out.RawString(prefix)
		out.String(string(in.SourceLanguage))
	}
	{
		const prefix string = ",\"documentDisassemblingStatus\":"
		out.RawString(prefix)
		out.String(string(in.DisassemblingStatus))
	}
	{
		const prefix string = ",\"targetLanguage\":"
		out.RawString(prefix)
		out.String(string(in.TargetLanguage))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"wordsCount\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.WordsCount))
	}
	{
		const prefix string = ",\"statusModificationDate\":"
		out.RawString(prefix)
		out.Raw((in.StatusModificationDate).MarshalJSON())
	}
	{
		const prefix string = ",\"pretranslateCompleted\":"
		out.RawString(prefix)
		out.Bool(bool(in.PretranslateCompleted))
	}
	{
		const prefix string = ",\"workflowStages\":"
		out.RawString(prefix)
		if in.WorkflowStages == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.WorkflowStages {
				if v11 > 0 {
					out.RawByte(',')
				}
				(v12).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"externalId\":"
		out.RawString(prefix)
		out.String(string(in.ExternalID))
	}
	{
		const prefix string = ",\"metaInfo\":"
		out.RawString(prefix)
		out.String(string(in.MetaInfo))
	}
	{
		const prefix string = ",\"placeholdersAreEnabled\":"
		out.RawString(prefix)
		out.Bool(bool(in.PlaceholdersAreEnabled))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Document) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson18605acbEncodeGithubComMarkus621GoSmartcatClient3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Document) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson18605acbEncodeGithubComMarkus621GoSmartcatClient3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Document) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson18605acbDecodeGithubComMarkus621GoSmartcatClient3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Document) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson18605acbDecodeGithubComMarkus621GoSmartcatClient3(l, v)
}
